# -*- coding: utf-8 -*-
"""DGS Code Jam - Tom

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDh6OhCfmdwE2Qy97hc4torSVG_mkvnP
"""

import pandas as pd
from datetime import datetime

# define a URL where archibus data is stored
url = 'https://github.com/james-trimarco/standard_datasets/raw/master/archibus.csv'

# attempt to read the .csv from the URL
archibus_raw = pd.read_csv(filepath_or_buffer=url, parse_dates=True)

# see number of columns in dataset
  # archibus_raw.info()

# copy so changes don't propagate back
archibus = archibus_raw.copy()

# cast the two date columns to 'datatime'
archibus['date_requested'] = pd.to_datetime(archibus['date_requested'])
archibus['date_completed'] = pd.to_datetime(archibus['date_completed'])

archibus.dt.month

def add_month(df, date_requested):
    """
    Adds to a DataFrame a new column with a numeric representation of the month
    of the data_requested

    Args:
      df (dataframe): input dataframe
      date_requested (str): name of column with the relevant date
    
    Returns:
      df (dataframe): the dataframe with the 'month' column added
    """

    df = df.copy()
    df['month'] = DatetimeIndex(df['data_requested']).month
    return df

archibus_mon = add_month(archibus, 'date_requested')

def add_fiscalyear(df, month):
    """
    Adds to a DataFrame a new column representing
    the fiscal year of a date requested

    Args: 
      df (dataframe): input dataframe
      month (str): name of column with month of the date requested

    Returns:
    df (dataframe): the dataframe with the 'fiscalyear' column added.
    """

    df = df.copy()
    cond1 = df[month_col] > 6
    df.loc[cond1,] = DateYear([Month])+1
    df.loc[~cond1,] = DateYear([Month])
    return df 

add_fiscalyear(archibus_mon, 'month').sample(3, random_state=43)

# OTHER THINGS I TRIED WHICH FAILED


# def get_financial_year(df, date_requested) :
#   date = datetime.datetime.strptime(datestring, "%Y-%m-%d").date()
#             # initialize the current year
#             year_of_date = date.year
#             # initialize the current financial year start date
#             financial_year_start_date = datetime.datetime.strptime(str(year_of_date)+"-07-01","%Y-%m-%d").date()
#             if date<financial_year_start_date:
#                     return 'July, '+ str(financial_year_start_date.year-1)+' to June, '+ str(financial_year_start_date.year)
#             else:
#                     return 'July, '+ str(financial_year_start_date.year)+' to June, '+ str(financial_year_start_date.year+1)

# def add_fiscalyear(df, date_requested):
#     # copy over the df so the original remains unchanged
#     df = df.copy()
#     # define a logical condition
#     cond1 = df[ date_col] > pd.to_timedelta(200, unit='days')
#     # set values in the new column 'bool' that meet conditions to True
#     df.loc[cond1, 'late'] = True
#     # set values in the new column 'bool' that don't meet conditions to False
#     df.loc[~cond1, 'late'] = False
#     return df